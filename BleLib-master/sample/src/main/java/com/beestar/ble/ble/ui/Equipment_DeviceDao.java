package com.beestar.ble.ble.ui;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beestar.ble.ble.greendao.DaoSession;
import com.beestar.ble.ble.greendao.Equipment_Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EQUIPMENT__DEVICE".
*/
public class Equipment_DeviceDao extends AbstractDao<Equipment_Device, Long> {

    public static final String TABLENAME = "EQUIPMENT__DEVICE";

    /**
     * Properties of entity Equipment_Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Read_uuid = new Property(2, String.class, "read_uuid", false, "READ_UUID");
        public final static Property Write_uuid = new Property(3, String.class, "write_uuid", false, "WRITE_UUID");
        public final static Property Ch_read_uuid = new Property(4, String.class, "ch_read_uuid", false, "CH_READ_UUID");
        public final static Property Ch_write_uuid = new Property(5, String.class, "ch_write_uuid", false, "CH_WRITE_UUID");
    }


    public Equipment_DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public Equipment_DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EQUIPMENT__DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADDRESS\" TEXT," + // 1: address
                "\"READ_UUID\" TEXT," + // 2: read_uuid
                "\"WRITE_UUID\" TEXT," + // 3: write_uuid
                "\"CH_READ_UUID\" TEXT," + // 4: ch_read_uuid
                "\"CH_WRITE_UUID\" TEXT);"); // 5: ch_write_uuid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EQUIPMENT__DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Equipment_Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        String read_uuid = entity.getRead_uuid();
        if (read_uuid != null) {
            stmt.bindString(3, read_uuid);
        }
 
        String write_uuid = entity.getWrite_uuid();
        if (write_uuid != null) {
            stmt.bindString(4, write_uuid);
        }
 
        String ch_read_uuid = entity.getCh_read_uuid();
        if (ch_read_uuid != null) {
            stmt.bindString(5, ch_read_uuid);
        }
 
        String ch_write_uuid = entity.getCh_write_uuid();
        if (ch_write_uuid != null) {
            stmt.bindString(6, ch_write_uuid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Equipment_Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        String read_uuid = entity.getRead_uuid();
        if (read_uuid != null) {
            stmt.bindString(3, read_uuid);
        }
 
        String write_uuid = entity.getWrite_uuid();
        if (write_uuid != null) {
            stmt.bindString(4, write_uuid);
        }
 
        String ch_read_uuid = entity.getCh_read_uuid();
        if (ch_read_uuid != null) {
            stmt.bindString(5, ch_read_uuid);
        }
 
        String ch_write_uuid = entity.getCh_write_uuid();
        if (ch_write_uuid != null) {
            stmt.bindString(6, ch_write_uuid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Equipment_Device readEntity(Cursor cursor, int offset) {
        Equipment_Device entity = new Equipment_Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // address
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // read_uuid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // write_uuid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ch_read_uuid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // ch_write_uuid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Equipment_Device entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRead_uuid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWrite_uuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCh_read_uuid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCh_write_uuid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Equipment_Device entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Equipment_Device entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Equipment_Device entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
